class CEnhancedMenu inherit CMenu;

	export var procref<bool,bool> m_xOnHideWindow;

	static var ^CEnhancedMenu ms_pxInst;

	var ^CLoadSaveDialog				m_pxDialog;
	var ^CDesktop						m_pxDesktop;
	var ^CLevel							m_pxActualLevel;
	var ^CViewObjInsert 				m_pxObjInsert;
	var ^CViewObjFinder 				m_pxObjFinder;
	var ^CSequenceEditor 				m_pxSequenceEditor;
	var ^CViewColorPicker				m_pxColorPicker;
	var ^CViewObjProperties				m_pxObjProperties;
	var ^CViewObjTransform 				m_pxObjTransform;
	var ^CViewObjGoat     				m_pxObjGoat;
	var ^CViewScapeEdit					m_pxViewScapeEdit;
	var ^CViewScapeTemplates			m_pxViewScapeTemplates;
	var ^CViewResize					m_pxViewResize;
	var ^CViewBrush		 				m_pxViewBrush;
	var ^CViewFileNew					m_pxFileNew;
	var ^CViewLevelInfo					m_pxViewLevelInfo;
	var ^CViewQuestEditor				m_pxViewQuestEditor;
	var ^CViewPlayerInfo				m_pxViewPlayerInfo;
	var ^CViewLevelProp					m_pxViewLevelProp;
	var ^CViewMiniMap					m_pxMiniMap;
	var ^CViewTriggerCreate				m_pxViewTriggerCreate;
	var ^CViewRegionCreate 				m_pxViewZoneCreate;
	var ^CViewAtmoMarkers				m_pxViewAtmoMarkers;
	var ^CAtmoMarkerTemplates			m_pxAtmoMarkerTemplates;
	var ^CMaterialAtmos					m_pxMaterialAtmos;
	var ^CViewPreferences				m_pxViewPreferences;
	var ^CViewAbout						m_pxViewAbout;
	var ^CViewOnlineHelp				m_pxViewHelp;
	var ^CViewTipOfTheDay				m_pxViewTipOfTheDay;
	var ^CEAXEnvironments				m_pxEAXEnvironments;
	var ^DbgMenuChPe					m_pxDbgChPe;
	var ^CFXSettings					m_pxFXSettings;
	var ^CSequenceControlPanel			m_pxSequenceControlPanel;
	var ^CDialogSceneEditor				m_pxDialogSceneEditor;
	var ^CLevelCheck					m_pxLevelCheck;
	var ^CDumpTriggerInfo				m_pxDumpTriggerInfo;

	//Open recent file variables
	var int								m_iMaxRecentDB,m_iCurRecentDB;
	var array string					m_asRecent;
	var ^CDropButton 					m_pxFileOpenRecent;
	var ^CDropButton					m_pxFORecent0;
	var ^CDropButton					m_pxFORecent1;
	var ^CDropButton					m_pxFORecent2;
	var ^CDropButton					m_pxFORecent3;

	var ^CDropButton					m_pxUndo;

	var string 							m_sLevelName;
	//for window visibility
	var bool 							m_bVisState;
	var	array ^CEnhancedFrameWindow		m_apxWindows;
	var bool 							m_bCapture;
	var ^CLevelEditorInst				m_pxLevelEditor;

	var int								m_iLayoutTimer,m_iShutDownTimer;
	var string						 	m_sCurrentLoadingLevel;
	var bool 							m_bShowWarnings;
	var bool							m_bProfiler;
	var string 							m_sSaveFileString;
	var string							m_sLoadFileString;

	var bool							m_bQuickStarting;


	export constructor()
		m_bQuickStarting=false;
		m_pxDesktop=CClientWrap.GetDesktop();
		InitShortcuts();
		m_bCapture=true;

		//Sets default window positions
		SetDefaultPositions();

		var ^CDropButton pxFile = new CDropButton({0,0},"File");
		pxFile^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_File"));
		pxFile^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_File"));

		var ^CDropButton pxEdit = new CDropButton({0,0},"Edit");
		pxEdit^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Edit"));
		pxEdit^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_EditMenu"));

		var ^CDropButton pxScape = new CDropButton({0,0},"Scape");
		pxScape^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Scape"));
		pxScape^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_ScapeMenu"));

		var ^CDropButton pxObjects = new CDropButton({0,0},"Objects");
		pxObjects^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Objects"));
		pxObjects^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_ObjectsMenu"));

		var ^CDropButton pxTrigger = new CDropButton({0,0},"Trigger");
		pxTrigger^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Trigger"));
		pxTrigger^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_TriggerMenu"));

		var ^CDropButton pxSound = new CDropButton({0,0},"Sound");
		pxSound^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Sound"));
		pxSound^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_SoundMenu"));

		var ^CDropButton pxTools = new CDropButton({0,0},"Tools");
		pxTools^.SetText("Tools");
		pxTools^.SetToolTipText("Tools");

		var ^CDropButton pxOptions = new CDropButton({0,0},"Options");
		pxOptions^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Options"));
		pxOptions^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_OptionsMenu"));

		//var ^CDropButton pxDbg = new CDropButton({0,0},"Dbg");

		var ^CDropButton pxHelp = new CDropButton({0,0},"Help");

		AddDropButton(pxFile);
		AddDropButton(pxEdit);
		AddDropButton(pxScape);
		AddDropButton(pxObjects);
		AddDropButton(pxTrigger);
		AddDropButton(pxSound);
		AddDropButton(pxTools);
		AddDropButton(pxOptions);
		AddDropButton(pxHelp);

		/*
		var int iShowDbgMenu;
		CSettings.Get("Editor/Dbg/ShowDbgMenu",iShowDbgMenu);
		if(iShowDbgMenu>0) then
			AddDropButton(pxDbg);
		endif;
		*/

		//Fill Drop Menu Buttons
		//File Menu Entries
		var ^CDropButton pxFileNew = new CDropButton({0,0},"New");
		pxFileNew^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_New"));
		pxFileNew^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_New"));

		var ^CDropButton pxFileOpen = new CDropButton({0,0},"Open");
		pxFileOpen^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Open"));
		pxFileOpen^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Open"));

		m_pxFileOpenRecent = new CDropButton({0,0},"Open Recent");
		m_pxFileOpenRecent^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Open_Recent"));
		m_pxFileOpenRecent^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Open_Recent"));

		var ^CDropButton pxFileSave = new CDropButton({0,0},"Save");
		pxFileSave^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Save"));
		pxFileSave^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Save"));

		var ^CDropButton pxFileSaveAs = new CDropButton({0,0},"Save As");
		pxFileSaveAs^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Save_As"));
		pxFileSaveAs^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Save_As"));

		var ^CDropButton pxFileClose = new CDropButton({0,0},"Close");
		pxFileClose^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Close"));
		pxFileClose^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Close"));

		pxFileSave^.SetDisabled(true);
		pxFileSaveAs^.SetDisabled(true);

		CMainController.Get().SetDropButtons(pxFileSave,pxFileSaveAs);

		pxFile^.AddItem(pxFileNew);
		pxFile^.AddLine();
		pxFile^.AddItem(pxFileOpen);
		pxFile^.AddItem(m_pxFileOpenRecent);
		pxFile^.AddItem(pxFileSave);
		pxFile^.AddItem(pxFileSaveAs);
		pxFile^.AddLine();
		pxFile^.AddItem(pxFileClose);

		pxFileNew^.m_xOnClick = OnFileNew;
		pxFileOpen^.m_xOnClick = OnLoad;
		pxFileSave^.m_xOnClick = OnSave;
		pxFileSaveAs^.m_xOnClick = OnSaveAsLevel;
		pxFileClose^.m_xOnClick = SetShutDownTimer;
		UpdateRecentlyOpendFiles();

		m_pxUndo = new CDropButton({0,0},"Undo");
		OnUndoChanged();

//		var ^CDropButton pxRedo = new CDropButton({0,0},"Redo");
//		pxRedo^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Redo"));
//		pxRedo^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Redo"));
/*
		var ^CDropButton pxCut = new CDropButton({0,0},"Cut");
		pxCut^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Cut"));
		pxCut^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Cut"));

		var ^CDropButton pxCopy = new CDropButton({0,0},"Copy");
		pxCopy^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Copy"));
		pxCopy^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Copy"));

		var ^CDropButton pxPaste = new CDropButton({0,0},"Paste");
		pxPaste^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Paste"));
		pxPaste^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Paste"));

		var ^CDropButton pxDelete = new CDropButton({0,0},"Delete");
		pxDelete^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Delete"));
		pxDelete^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Delete"));
*/
		pxEdit^.AddItem(m_pxUndo);
//		pxEdit^.AddItem(pxRedo);
//		pxRedo^.SetDisabled(true);
		//pxEdit^.AddItem(pxCut);
		//pxEdit^.AddItem(pxCopy);
		//pxEdit^.AddItem(pxPaste);
		//pxEdit^.AddItem(pxDelete);
		//Edit Menu Entries

		//CKeyHandler.Get().AddDropButtonKT(pxUndo,"UNDO,Undo");
		m_pxUndo^.m_xOnClick = UNDO;

		//Scape Menu Entries
		var ^CDropButton pxScapeEdit = new CDropButton({0,0},"Edit Scape");
		pxScapeEdit^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Edit_Scape"));
		pxScapeEdit^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Edit_Scape"));

		var ^CDropButton pxFileBrushes = new CDropButton({0,0},"Brushes");
		pxFileBrushes^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Brushes"));
		pxFileBrushes^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Brushes"));

		var ^CDropButton pxMiniMap = new CDropButton({0,0},"MiniMap");
		pxMiniMap^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_MiniMap"));
		pxMiniMap^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_MiniMap"));

		var ^CDropButton pxScapeTemplates = new CDropButton({0,0},"ScapeTemplates");
		pxScapeTemplates^.SetText("ScapeTemplates");
		pxScapeTemplates^.SetToolTipText("Create Scape Templates");

		var ^CDropButton pxResize = new CDropButton({0,0},"Resize Map");
		pxResize^.SetText("Resize Map");
		pxMiniMap^.SetToolTipText("Resize the map");

		pxScape^.AddItem(pxScapeEdit);
		pxScape^.AddItem(pxFileBrushes);
		//pxScape^.AddItem(pxSetTime);
		pxScape^.AddLine();
		pxScape^.AddItem(pxMiniMap);
		pxScape^.AddItem(pxScapeTemplates);
		pxScape^.AddItem(pxResize);

		pxScapeEdit^.m_xOnClick = EditScape;
		pxFileBrushes^.m_xOnClick = OnBrush;
		//pxSetTime^.m_xOnClick = SetTime;
		pxMiniMap^.m_xOnClick = MiniMap;
		pxScapeTemplates^.m_xOnClick = ScapeTemplates;
		pxResize^.m_xOnClick = OnScapeResize;

		//Object Menu Entries
		var ^CDropButton pxObjectsInsert = new CDropButton({0,0},"Insert");
		pxObjectsInsert^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Insert"));
		pxObjectsInsert^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Insert"));
		//CKeyHandler.Get().AddDropButtonKT(pxObjectsInsert,"OnObjInsert,Insert");

		var ^CDropButton pxObjectsProps = new CDropButton({0,0},"Properties");
		pxObjectsProps^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Properties"));
		pxObjectsProps^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Properties"));
		//CKeyHandler.Get().AddDropButtonKT(pxObjectsProps,"OnObjProperties,Properties");

		var ^CDropButton pxObjectsFinder = new CDropButton({0,0},"Finder");
		pxObjectsFinder^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Finder"));
		pxObjectsFinder^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Finder"));
		//CKeyHandler.Get().AddDropButtonKT(pxObjectsFinder,"OnObjFinder,Finder");

		//var ^CDropButton pxViewLevelProperties = new CDropButton({0,0},"Level Options");
		//pxViewLevelProperties^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Level_Options"));
		//pxViewLevelProperties^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Level_Options"));
		//CKeyHandler.Get().AddDropButtonKT(pxViewLevelProp,"OnLevelOptions,Level Options");

		//var ^CDropButton pxObjectsGfx = new CDropButton({0,0},"Graphic Sets");
		//pxObjectsGfx^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Graphic_Sets"));
		//pxObjectsGfx^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Graphic_Sets"));

		var ^CDropButton pxObjectsTransform = new CDropButton({0,0},"Transform");
		pxObjectsTransform^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Transform"));
		pxObjectsTransform^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Transform"));

		//var ^CDropButton pxObjectsGoat = new CDropButton({0,0},"GOAT");
		//pxObjectsGoat^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_GOAT"));
		//pxObjectsGoat^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_GOAT"));

		//var ^CDropButton pxSequenceEditor = new CDropButton({0,0},"SequenceEditor");
		//pxSequenceEditor^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_SEQUENZEDITOR"));
		//pxSequenceEditor^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_SEQUENZEDITOR"));

		var ^CDropButton pxShowInvisible = new CDropButton({0,0},"Show Invisible Objects");

		pxObjects^.AddItem(pxObjectsInsert);
		pxObjects^.AddItem(pxObjectsFinder);
		pxObjects^.AddLine();
		pxObjects^.AddItem(pxObjectsProps);
		pxObjects^.AddItem(pxObjectsTransform);
		pxObjects^.AddItem(pxShowInvisible);

		//pxObjectsGfx^.m_xOnClick = OnObjGfx;
		pxObjectsInsert^.m_xOnClick = OnObjInsert;
		pxObjectsProps^.m_xOnClick = OnObjProps;
		pxObjectsTransform^.m_xOnClick = OnObjTransform;
		pxObjectsFinder^.m_xOnClick = OnObjFind;
		//pxObjectsGoat^.m_xOnClick = OnObjectGoat;
		pxShowInvisible^.m_xOnClick = OnShowInvisible;

		//Trigger Menu Entries
		var ^CDropButton pxTriggerCreate = new CDropButton({0,0},"Trigger");
		pxTriggerCreate^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Trigger"));
		pxTriggerCreate^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Trigger"));

		var ^CDropButton pxZoneCreate = new CDropButton({0,0},"Regions");
		pxZoneCreate^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Regions"));
		pxZoneCreate^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Regions"));

//		var ^CDropButton pxTriggerInsert = new CDropButton({0,0},"Insert");
//		pxTriggerInsert^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_InsertTrigger"));
//		pxTriggerInsert^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_InsertTrigger"));

//		var ^CDropButton pxTriggerEdit = new CDropButton({0,0},"Edit");
//		pxTriggerEdit^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_EditTrigger"));
//		pxTriggerEdit^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_EditTrigger"));

		pxTrigger^.AddItem(pxTriggerCreate);
		pxTrigger^.AddLine();
		pxTrigger^.AddItem(pxZoneCreate);
//		pxTrigger^.pxTriggerCreate^.AddItem(pxTriggerInsert);
//		pxTrigger^.pxTriggerCreate^.AddItem(pxTriggerEdit);
//		verbuggt
//		pxTriggerEdit^.SetDisabled(true);

		pxTriggerCreate^.m_xOnClick = OnCreateTrigger;
		pxZoneCreate^.m_xOnClick = OnZoneTrigger;
//		pxTriggerInsert^.m_xOnClick = OnFileNew;
//		pxTriggerEdit^.m_xOnClick = OnFileNew;

		//DBG
		//var ^CDropButton pxCHP = new CDropButton({0,0},"ChPe");
		//pxDbg^.AddItem(pxCHP);
		//pxCHP^.m_xOnClick = OnCHP;

		//Sound Menu Entries
		//var ^CDropButton pxViewAtmo = new CDropButton({0,0},"Atmo Markers");
		//pxViewAtmo^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Atmo_Markers"));
		//pxViewAtmo^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Atmo_Markers"));
		//pxSound^.AddItem(pxViewAtmo);
		//pxViewAtmo^.m_xOnClick = ViewAtmoMarkers;

		//var ^CDropButton pxAtmoTemplates = new CDropButton({0,0},"Atmo Marker Templates");
		//pxAtmoTemplates^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Atmo_MarkersTemplates"));
		//pxAtmoTemplates^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Atmo_MarkersTemplates"));
		//pxSound^.AddItem(pxAtmoTemplates);
		//pxAtmoTemplates^.m_xOnClick = AtmoMarkerTemplates;

		var ^CDropButton pxMaterialAtmos = new CDropButton({0,0},"Material Atmo Settings");
		pxMaterialAtmos^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Atmo_MarkersSettings"));
		pxMaterialAtmos^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_Atmo_TT_MarkersSettings"));
		pxSound^.AddItem(pxMaterialAtmos);
		pxMaterialAtmos^.m_xOnClick = MaterialAtmos;

		var ^CDropButton pxEAXEnvironments = new CDropButton({0,0},"EAX Environments");
//		pxMaterialAtmos^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Atmo_MarkersSettings"));
//		pxMaterialAtmos^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_Atmo_TT_MarkersSettings"));
		pxSound^.AddItem(pxEAXEnvironments);
		pxEAXEnvironments^.m_xOnClick = EAXEnvironments;

		pxSound^.AddLine();
		var ^CDropButton pxShowAudioListener = new CDropButton({0,0},"Show Audio-Listener");
		pxSound^.AddItem(pxShowAudioListener);
		pxShowAudioListener^.m_xOnClick = ShowAudioListener;


		//Sequencer Menu Entries
		var ^CDropButton pxShowSequenceEditor = new CDropButton({0,0},"SequenceEditor");
		var ^CDropButton pxSequenceControlPanel = new CDropButton({0,0},"Control Panel");
		var ^CDropButton pxDialogSceneEditor = new CDropButton({0,0},"Dialog scene editor");
		var ^CDropButton pxLevelCheck = new CDropButton({0,0},"Level Check");
		var ^CDropButton pxLevelPic = new CDropButton({0,0},"Level Pic");
		var ^CDropButton pxDumpTriggerInfo = new CDropButton({0,0},"Dump Trigger Info");
		var ^CDropButton pxDumpLevelInfo = new CDropButton({0,0},"Dump Level Info");

		pxTools^.AddItem(pxShowSequenceEditor);
		pxTools^.AddItem(pxSequenceControlPanel);
		pxTools^.AddItem(pxDialogSceneEditor);
		pxTools^.AddItem(pxLevelCheck);
		pxTools^.AddItem(pxLevelPic);
		pxTools^.AddItem(pxDumpTriggerInfo);
		pxTools^.AddItem(pxDumpLevelInfo);

		pxShowSequenceEditor^.m_xOnClick = OnSequenceEditor;
		pxSequenceControlPanel^.m_xOnClick = OnSequenceControlPanel;
		pxDialogSceneEditor^.m_xOnClick = OnDialogSceneEditor;
		pxLevelCheck^.m_xOnClick = OnLevelCheck;
		pxLevelPic^.m_xOnClick = OnLevelPic;
		pxDumpTriggerInfo^.m_xOnClick = OnDumpTriggerInfo;
		pxDumpLevelInfo^.m_xOnClick = OnDumpLevelInfo;

		//pxCameras^.SetDisabled(true);
		//pxSequenceOptions^.SetDisabled(true);

		//Options Menu Entries
		var ^CDropButton pxViewInfo = new CDropButton({0,0},"Info");
		pxViewInfo^.SetText(CLocalizer.Get().Translate("_EnhancedMenu_Info"));
		pxViewInfo^.SetToolTipText(CLocalizer.Get().Translate("_EnhancedMenu_TT_Info"));

		var ^CDropButton pxPreferences = new CDropButton({0,0},"Preferences");
		var ^CDropButton pxQuestEditor = new CDropButton({0,0},"Quest-Editor");
		var ^CDropButton pxQuickStart = new CDropButton({0,0},"Quickstart");
		var ^CDropButton pxFXSettings = new CDropButton({0,0},"FX-Settings");
		var ^CDropButton pxTTEditor = new CDropButton({0,0},"TT-Editor");
		var ^CDropButton pxViewLevelProp = new CDropButton({0,0},"Level Settings");
		var ^CDropButton pxViewPlayerInfo = new CDropButton({0,0},"Player Info");


		pxOptions^.AddItem(pxViewInfo);
		pxOptions^.AddItem(pxQuestEditor);		
		pxOptions^.AddItem(pxPreferences);
		pxOptions^.AddItem(pxQuickStart);
		pxOptions^.AddItem(pxFXSettings);
		pxOptions^.AddItem(pxTTEditor);
		pxOptions^.AddItem(pxViewLevelProp);
		pxOptions^.AddItem(pxViewPlayerInfo);

		pxViewInfo^.m_xOnClick 	  			= ViewLevelInfo;		
		pxPreferences^.m_xOnClick 			= OnPreferences;
		pxQuickStart^.m_xOnClick			= OnQuickStart;
		pxFXSettings^.m_xOnClick			= OnFXSettings;
		pxTTEditor^.m_xOnClick				= OnTTEditor;
		pxQuestEditor^.m_xOnClick			= ViewQuestEditor;
		pxViewLevelProp^.m_xOnClick 		= ViewLevelProp;
		pxViewPlayerInfo^.m_xOnClick			= ViewPlayerInfo;

		//Help
		var ^CDropButton pxSearchHelp = new CDropButton({0,0},"Search Help");
		pxHelp^.AddItem(pxSearchHelp);
		pxSearchHelp^.m_xOnClick = OnOpenHelp;

		var ^CDropButton pxTipOfTheDay = new CDropButton({0,0},"Tip of the day");
		pxHelp^.AddItem(pxTipOfTheDay);
		pxTipOfTheDay^.m_xOnClick = OnTipOfTheDay;

		var ^CDropButton pxAbout = new CDropButton({0,0},"About");
		pxHelp^.AddItem(pxAbout);
		pxAbout^.m_xOnClick = OnAbout;


		m_pxObjFinder						= new CViewObjFinder();
		m_pxSequenceEditor					= new CSequenceEditor();
		m_pxObjInsert						= new CViewObjInsert();
		m_pxObjProperties					= new CViewObjProperties();
		m_pxObjFinder^.SetObjPropWin(m_pxObjProperties);
		m_pxObjTransform					= new CViewObjTransform();
		m_pxObjFinder^.SetObjTransWin(m_pxObjTransform);
		m_pxObjGoat         				= new CViewObjGoat();
		m_pxDbgChPe							= new DbgMenuChPe();
		m_pxViewScapeEdit					= new CViewScapeEdit();
		m_pxViewScapeTemplates				= new CViewScapeTemplates();
		m_pxViewResize						= new CViewResize();
		m_pxViewBrush						= new CViewBrush();
		m_pxViewPreferences					= new CViewPreferences();
		m_pxViewAbout						= new CViewAbout();
		m_pxSequenceControlPanel			= new CSequenceControlPanel();
		m_pxViewHelp						= new CViewOnlineHelp();
		m_pxViewTipOfTheDay					= new CViewTipOfTheDay();
		m_pxViewLevelProp					= new CViewLevelProp();
		m_pxMiniMap							= new CViewMiniMap();
		m_pxViewTriggerCreate				= new CViewTriggerCreate();
		m_pxViewZoneCreate					= new CViewRegionCreate();
		m_pxFileNew							= new CViewFileNew();
		m_pxViewLevelInfo					= new CViewLevelInfo();
		m_pxViewQuestEditor					= new CViewQuestEditor();
		m_pxViewPlayerInfo					= new CViewPlayerInfo();
		m_pxAtmoMarkerTemplates 			= new CAtmoMarkerTemplates();
		m_pxViewAtmoMarkers					= new CViewAtmoMarkers(m_pxAtmoMarkerTemplates);
		m_pxMaterialAtmos 					= new CMaterialAtmos();
		m_pxEAXEnvironments					= new CEAXEnvironments();
		m_pxFXSettings						= new CFXSettings();
		m_pxDialogSceneEditor				= new CDialogSceneEditor;
		m_pxLevelCheck						= new CLevelCheck;
		m_pxDumpTriggerInfo					= new CDumpTriggerInfo;

		m_pxDesktop^.AddChild(m_pxObjFinder);
		m_pxDesktop^.AddChild(m_pxSequenceEditor);
		m_pxDesktop^.AddChild(m_pxObjInsert);
		m_pxDesktop^.AddChild(m_pxObjProperties);
		m_pxDesktop^.AddChild(m_pxObjTransform);
		m_pxDesktop^.AddChild(m_pxObjGoat);
		m_pxDesktop^.AddChild(m_pxViewScapeEdit);
		m_pxDesktop^.AddChild(m_pxViewScapeTemplates);
		m_pxDesktop^.AddChild(m_pxViewResize);
		m_pxDesktop^.AddChild(m_pxViewBrush);
		m_pxDesktop^.AddChild(m_pxDbgChPe);
		m_pxDesktop^.AddChild(m_pxFileNew);
		m_pxDesktop^.AddChild(m_pxViewLevelInfo);
		m_pxDesktop^.AddChild(m_pxViewQuestEditor);
		m_pxDesktop^.AddChild(m_pxViewPlayerInfo);		
		m_pxDesktop^.AddChild(m_pxViewPreferences);
		m_pxDesktop^.AddChild(m_pxViewAbout);
		m_pxDesktop^.AddChild(m_pxSequenceControlPanel);
		m_pxDesktop^.AddChild(m_pxViewHelp);
		m_pxDesktop^.AddChild(m_pxViewTipOfTheDay);
		m_pxDesktop^.AddChild(m_pxViewLevelProp);
		m_pxDesktop^.AddChild(m_pxMiniMap);
		m_pxDesktop^.AddChild(m_pxViewTriggerCreate);
		m_pxDesktop^.AddChild(m_pxViewZoneCreate);
		m_pxDesktop^.AddChild(m_pxViewAtmoMarkers);
		m_pxDesktop^.AddChild(m_pxAtmoMarkerTemplates);
		m_pxDesktop^.AddChild(m_pxMaterialAtmos);
		m_pxDesktop^.AddChild(m_pxEAXEnvironments);
		m_pxDesktop^.AddChild(m_pxFXSettings);
		m_pxDesktop^.AddChild(m_pxDialogSceneEditor);
		m_pxDesktop^.AddChild(m_pxLevelCheck);
		m_pxDesktop^.AddChild(m_pxDumpTriggerInfo);


		//for window visibility
		m_bVisState=true;
		//arrays holding windows & visibility states
		m_apxWindows.AddEntry(m_pxObjFinder);
		m_apxWindows.AddEntry(m_pxSequenceEditor);
		m_apxWindows.AddEntry(m_pxObjInsert);
		m_apxWindows.AddEntry(m_pxObjProperties);
		m_apxWindows.AddEntry(m_pxViewScapeEdit);
		m_apxWindows.AddEntry(m_pxViewScapeTemplates);
		m_apxWindows.AddEntry(m_pxViewResize);
		m_apxWindows.AddEntry(m_pxViewBrush);
		m_apxWindows.AddEntry(m_pxFileNew);
		m_apxWindows.AddEntry(m_pxViewLevelInfo);
		m_apxWindows.AddEntry(m_pxViewQuestEditor);
		m_apxWindows.AddEntry(m_pxViewPlayerInfo);		
		m_apxWindows.AddEntry(m_pxViewPreferences);
		m_apxWindows.AddEntry(m_pxMiniMap);
		m_apxWindows.AddEntry(m_pxViewTriggerCreate);
		m_apxWindows.AddEntry(m_pxViewZoneCreate);
		m_apxWindows.AddEntry(m_pxDbgChPe);
		m_apxWindows.AddEntry(m_pxObjTransform);
		m_apxWindows.AddEntry(m_pxViewLevelProp);
		m_apxWindows.AddEntry(m_pxViewAtmoMarkers);
		m_apxWindows.AddEntry(m_pxAtmoMarkerTemplates);
		m_apxWindows.AddEntry(m_pxMaterialAtmos);
		m_apxWindows.AddEntry(m_pxEAXEnvironments);
		m_apxWindows.AddEntry(m_pxFXSettings);
		m_apxWindows.AddEntry(m_pxViewAbout);
		m_apxWindows.AddEntry(m_pxSequenceControlPanel);
		m_apxWindows.AddEntry(m_pxViewHelp);
		m_apxWindows.AddEntry(m_pxViewTipOfTheDay);
		m_apxWindows.AddEntry(m_pxDialogSceneEditor);
		m_apxWindows.AddEntry(m_pxLevelCheck);
		m_apxWindows.AddEntry(m_pxDumpTriggerInfo);

		//normal windows cursor
		m_pxDesktop^.SetStandardCursor();

		//Manual minimap update
		//m_pxMiniMap^.SetManualUpdate(true);

		m_iLayoutTimer=SetTimer(200,true);
		m_bProfiler=false;
		CEvt_GenericEvent.Send("SetSTPMode&true");
		CWindowMgr.Get().EnableFocusShortcuts(true);
	endconstructor;

	export destructor()		
		CEvt_GenericEvent.Send("SetSTPMode&false");
		delete m_pxObjFinder;
		delete m_pxObjTransform;
		delete m_pxSequenceEditor;
		if(m_pxObjInsert!=null)then delete m_pxObjInsert;endif;
		delete m_pxObjProperties;
       	delete m_pxObjGoat;
		delete m_pxViewScapeEdit;
		delete m_pxViewScapeTemplates;
		delete m_pxViewResize;
		delete m_pxViewBrush;
		delete m_pxFileNew;
		delete m_pxViewLevelInfo;
		delete m_pxViewQuestEditor;
		delete m_pxViewPlayerInfo;		
		delete m_pxViewTriggerCreate;
		delete m_pxViewZoneCreate;
		delete m_pxViewPreferences;
		delete m_pxViewAbout;
		delete m_pxSequenceControlPanel;
		delete m_pxViewHelp;
		delete m_pxViewTipOfTheDay;
		delete m_pxViewLevelProp;
		delete m_pxMiniMap;
		delete m_pxViewAtmoMarkers;
		delete m_pxAtmoMarkerTemplates;
		delete m_pxMaterialAtmos;
		delete m_pxEAXEnvironments;
		delete m_pxDbgChPe;
		delete m_pxFXSettings;
		delete m_pxDialogSceneEditor;
		delete m_pxLevelCheck;
		delete m_pxDumpTriggerInfo;

	enddestructor;

	proc bool OnTimer(int p_iTimerID)
		if(p_iTimerID==m_iLayoutTimer)then
			GetPreferences()^.GetGeneralPreferences()^.LoadLayout();
			GetPreferences()^.GetGeneralPreferences()^.UpdateBars();
			UnsetTimer(p_iTimerID);
		elseif(p_iTimerID==m_iShutDownTimer)then
			OnClose();
		endif;
		return(true);
	endproc;

	export static proc ref CEnhancedMenu Get()
		if (ms_pxInst==null)then
			ms_pxInst=new CEnhancedMenu;
		endif;
		return(ms_pxInst^);
	endproc;
	
	export static proc void ShutStatic()		
		delete ms_pxInst;
		ms_pxInst=null;
	endproc;

	export proc ^CLevelEditorInst GetLevelEditor()
		return m_pxLevelEditor;
	endproc;

	export proc void SetLevelEditor(^CLevelEditorInst p_pxLevelEditor)
		m_pxLevelEditor=p_pxLevelEditor;
	endproc;

	export proc ^CViewScapeEdit GetScapeEdit()
		return(m_pxViewScapeEdit);
	endproc;

	export proc ^CViewLevelInfo GetViewLevelInfo()
		return(m_pxViewLevelInfo);
	endproc;

	export proc ^CMaterialAtmos GetMaterialAtmos()
		return(m_pxMaterialAtmos);
	endproc;



	export proc ^CViewQuestEditor GetViewQuestEditor()
		return(m_pxViewQuestEditor);
	endproc;

	export proc ^CViewPlayerInfo GetViewPlayerInfo()
		return(m_pxViewPlayerInfo);
	endproc;

	export proc ^CSequenceControlPanel GetSequenceControlPanel()
		return(m_pxSequenceControlPanel);
	endproc;

	export proc ^CViewScapeTemplates GetScapeTemplates()
		return(m_pxViewScapeTemplates);
	endproc;

	export proc ^CViewLevelProp  GetLevelPropView()
		return(m_pxViewLevelProp);
	endproc;

	export proc ^CDialogSceneEditor GetDialogSceneEditor()
		return(m_pxDialogSceneEditor);
	endproc;
	
	export proc ^CLevelCheck GetLevelCheck()
		return(m_pxLevelCheck);
	endproc;


	export proc bool OnLevelBlockUp();
		m_pxViewScapeEdit^.LevelBlockUp();
		return(true);
	endproc;

	export proc bool OnLevelBlockDown();
		m_pxViewScapeEdit^.LevelBlockDown();
		return(true);
	endproc;

	export proc bool OnScaleBlockUpMin();
		m_pxViewScapeEdit^.ScaleBlockUpMinimum();
		return(true);
	endproc;

	export proc bool OnScaleBlockDownMin();
		m_pxViewScapeEdit^.ScaleBlockDownMinimum();
		return(true);
	endproc;

	export proc bool OnScaleBlockUpMax();
		m_pxViewScapeEdit^.ScaleBlockUpMaximum();
		return(true);
	endproc;

	export proc bool OnScaleBlockDownMax();
		m_pxViewScapeEdit^.ScaleBlockDownMaximum();
		return(true);
	endproc;

	export proc void OnUndoChanged()
		var int iC=CLevelEditorWrap.GetUndoBuffer().NumUndoSteps();
		m_pxUndo^.SetDisabled(iC==0);
		var string sText=CLocalizer.Get().Translate("_EnhancedMenu_Undo");
		if(iC>0)then
			sText+=" - "+CLevelEditorWrap.GetUndoBuffer().GetUndoTitle(0);
		endif;
		m_pxUndo^.SetText(sText);
		m_pxUndo^.SetToolTipText(sText);
	endproc;

	proc bool InitShortcuts()
		var ^CWindow pxDesktop = CWindowMgr.Get().GetDesktop(0);

		//Shortcuts for terrain editing modes
		pxDesktop^.SetCmd("SwitchAltitudeMode",OnActivateTerrainAltitude );
		pxDesktop^.SetCmd("SwitchBlurMode", OnActivateTerrainBlur );
		pxDesktop^.SetCmd("SwitchLevelMode", OnActivateTerrainLevel );
		pxDesktop^.SetCmd("SwitchNoiseMode", OnActivateTerrainNoise );
		pxDesktop^.SetCmd("SwitchDetailMode", OnActivateTerrainDetail );
		pxDesktop^.SetCmd("SwitchPlateauMode", OnActivateTerrainPlateau );
		pxDesktop^.SetCmd("SwitchForestMode", OnActivateTerrainForest );

		pxDesktop^.SetCmd("SwitchMaterial1", OnActivateMaterial1 );
		pxDesktop^.SetCmd("SwitchMaterial2", OnActivateMaterial2 );
		pxDesktop^.SetCmd("SwitchMaterial3", OnActivateMaterial3 );
		pxDesktop^.SetCmd("SwitchMaterial4", OnActivateMaterial4 );
		pxDesktop^.SetCmd("SwitchMaterial5", OnActivateMaterial5 );
		pxDesktop^.SetCmd("SwitchMaterial6", OnActivateMaterial6 );
		pxDesktop^.SetCmd("SwitchMaterial7", OnActivateMaterial7 );
		pxDesktop^.SetCmd("SwitchMaterial8", OnActivateMaterial8 );

		pxDesktop^.SetCmd("LevelBlockUp", OnLevelBlockUp);
		pxDesktop^.SetCmd("LevelBlockDown", OnLevelBlockDown);

		pxDesktop^.SetCmd("ScaleBlockUpMin", OnScaleBlockUpMin);
		pxDesktop^.SetCmd("ScaleBlockDownMin", OnScaleBlockDownMin);
		pxDesktop^.SetCmd("ScaleBlockUpMax", OnScaleBlockUpMax);
		pxDesktop^.SetCmd("ScaleBlockDownMax", OnScaleBlockDownMax);

		pxDesktop^.SetCmd("IncreaseBrushSizeBy1", IncreaseBrush );
		pxDesktop^.SetCmd("DecreaseBrushSizeBy1", DecreaseBrush );
		pxDesktop^.SetCmd("IncreaseBrushIntensityBy1", IncreaseBrushIntensity );
		pxDesktop^.SetCmd("DecreaseBrushIntensityBy1", DecreaseBrushIntensity );

		pxDesktop^.SetCmd("IncreaseDayTime", IncreaseDayTime );
		pxDesktop^.SetCmd("DecreaseDayTime", DecreaseDayTime );

		pxDesktop^.SetCmd("SwitchObjInsert", OnObjInsert);
		pxDesktop^.SetCmd("SwitchObjFinder",OnObjFinder);
		pxDesktop^.SetCmd("SwitchObjProperties",OnObjProperties);
		pxDesktop^.SetCmd("SwitchMiniMap",MiniMap);


		pxDesktop^.SetCmd("SwitchBrushWindow", OnBrush );
		pxDesktop^.SetCmd("NewLevel", OnFileNew );
		pxDesktop^.SetCmd("SaveLevel", OnSave );
		pxDesktop^.SetCmd("SaveLevelAs", OnSaveAsLevel );
		pxDesktop^.SetCmd("LoadLevel", OnLoad );
		pxDesktop^.DeleteCmd( "Kill" );


		//Miscellaneous shortcuts
		pxDesktop^.SetCmd("ShowHelp", OnHelp );
		pxDesktop^.SetCmd("SwitchGrid", OnSwitchGrid );
		pxDesktop^.SetCmd("SwitchRenderAllObjects", OnSwitchRenderAllObjects );
		pxDesktop^.SetCmd("SwitchLight", OnSwitchLight );
		pxDesktop^.SetCmd("SwitchWater", OnSwitchWater );
		pxDesktop^.SetCmd("SwitchWallMap", OnSwitchWallMap );
		pxDesktop^.SetCmd("SwitchUnderWaterFog", OnSwitchUnderWaterFog );
		pxDesktop^.SetCmd("SwitchObjectNames", OnSwitchObjectNames );
		pxDesktop^.SetCmd("SwitchRenderForest", OnSwitchRenderForest );
		pxDesktop^.SetCmd("QuickCopy", OnQuickCopy );
		pxDesktop^.SetCmd("HideUI", OnHideUI );
		pxDesktop^.SetCmd("HideAllUI", ChangeVis );
		pxDesktop^.SetCmd("IncreaseCameraSpeed", IncCamSpeed );
		pxDesktop^.SetCmd("DecreaseCameraSpeed", DecCamSpeed );
		pxDesktop^.SetCmd("UNDO", UNDO );
		pxDesktop^.SetCmd("Passability", OnSwitchPassability );
		pxDesktop^.SetCmd("NonPassability", OnSwitchNonPassability );
		pxDesktop^.SetCmd("SwitchProfiler", SwitchProfiler);
		pxDesktop^.SetCmd("SwitchServerProfiler", SwitchServerProfiler);
		pxDesktop^.SetCmd("SnapSelectionToGround", OnSnapSelectionToGround );


		//LevelEd capture
		pxDesktop^.SetCmd("CONTROL_F2", ToggleCaptureVideo );
		pxDesktop^.SetCmd("CopyObjetcs",OnCopyObjects);
		pxDesktop^.SetCmd("CutObjects",OnCutObjects);
		pxDesktop^.SetCmd("PasteObjects",OnPasteObjects);

		pxDesktop^.DeleteAllAccelerators();
		CKeyHandler.Get().UpdateAccelerators();
		return(true);
	endproc;

	export proc bool AddWindowToHide(^CEnhancedFrameWindow p_pxWindows)
		m_apxWindows.AddEntry(p_pxWindows);
		return(true);
	endproc;

	export proc bool DelWindowToHide(^CEnhancedFrameWindow p_pxWindows)
		var int idx;
		for(idx=0)cond(idx<m_apxWindows.NumEntries())iter(idx++)do
			if(m_apxWindows[idx]==p_pxWindows)then
				m_apxWindows.DeleteEntry(idx);
				idx--;
			endif;
		endfor;
		return(true);
	endproc;

	//Toggles UI Display
	proc bool OnHideUI();
		var	int	i;
		for(i=0)cond(i<m_apxWindows.NumEntries())iter(i++)do
			if(m_apxWindows[i]!=null)then
				m_apxWindows[i]^.InvokeCmd("HideAllUI");
			endif;
		endfor;
		if(m_bVisState==true)then
			if(!m_xOnHideWindow.IsNull())then
				m_xOnHideWindow.Call(false);
			endif;
			this^.SetVisible(false);
		else
			if(!m_xOnHideWindow.IsNull())then
				m_xOnHideWindow.Call(true);
			endif;
			this^.SetVisible(true);
		endif;
		m_bVisState=!m_bVisState;
/*		//Das wird die arrayfreie Variante...
			for(i=0)cond(i<m_pxDesktop^.NumChildWindows())iter()do
			m_pxDesktop^.GetChild(i).InvokeCmd("HideAllUI");
		endfor;
*/		return(true);
	endproc;

	export proc bool UNDO()
		CLevelEditorWrap.GetUndoBuffer().UndoStep();
/*		var int idx;
		idx = CLevelEditorWrap.GetScapeMgr().GetUndoBuffer().NumEntries();
		CLevelEditorWrap.LogSpam("UI.EnchancedMenu","UndoBuffer  ---> "+idx.ToString());*/
		return(true);
	endproc;


	//Updates the recently opend files
	export proc bool UpdateRecentlyOpendFiles()
		m_iMaxRecentDB = 4;
		m_iCurRecentDB = 0;
		var int i;
		for(i=0)cond(i<m_iMaxRecentDB)iter(i++)do
			m_asRecent.AddEntry("-1");
			var string sString;
			CSettings.Get("Editor/RecentlyOpenedFiles/Recent"+i.ToString(),sString);
			if(sString!="")then
				m_asRecent[i]=sString;
			endif;
		endfor;

		var bool bVisible=false;
		var int iC=m_asRecent.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			if(Filesystem.FileExists(m_asRecent[i]))then
				m_iCurRecentDB++;
				AddDButton(m_iCurRecentDB,m_asRecent[i]);
				bVisible=true;
			else
				KLog.LogWarn("Manni","File '"+m_asRecent[i]+"' not existing!");
			endif;
		endfor;
		m_pxFileOpenRecent^.SetDisabled(!bVisible);
		return(true);
	endproc;

	proc bool SaveRecent()
		var int idx;
		for(idx=0)cond(idx<m_iMaxRecentDB)iter(idx++)do
			if((m_asRecent[idx]!="-1")&&(m_asRecent[idx]!=""))then
				CSettings.Set("Editor/RecentlyOpenedFiles/Recent"+idx.ToString(),m_asRecent[idx]);
			endif;
		endfor;
		return(true);
	endproc;

	proc bool AddDButton(int p_iDBNr,string p_sRecent)
		switch(p_iDBNr)
			case(1)do
				m_pxFORecent0 = new CDropButton({0,0},"1. "+CutString(p_sRecent));
				m_pxFileOpenRecent^.AddItem(m_pxFORecent0);
				m_pxFORecent0^.m_xOnClick = OnRecent0;
				m_asRecent.AddEntry(p_sRecent);
			endcase;
			case(2)do
				m_pxFORecent1 = new CDropButton({0,0},"2. "+CutString(p_sRecent));
				m_pxFileOpenRecent^.AddItem(m_pxFORecent1);
				m_pxFORecent1^.m_xOnClick = OnRecent1;
				m_asRecent.AddEntry(p_sRecent);
			endcase;
			case(3)do
				m_pxFORecent2 = new CDropButton({0,0},"3. "+CutString(p_sRecent));
				m_pxFileOpenRecent^.AddItem(m_pxFORecent2);
				m_pxFORecent2^.m_xOnClick = OnRecent2;
				m_asRecent.AddEntry(p_sRecent);
			endcase;
			case(4)do
				m_pxFORecent3 = new CDropButton({0,0},"4. "+CutString(p_sRecent));
				m_pxFileOpenRecent^.AddItem(m_pxFORecent3);
				m_pxFORecent3^.m_xOnClick = OnRecent3;
				m_asRecent.AddEntry(p_sRecent);
			endcase;
			case default do
				CLevelEditorWrap.LogWarning("UI.EnchancedMenu","No DropButton added");
			endcase;
		endswitch;
		return(true);
	endproc;

	proc string CutString(string p_sString)
		p_sString=p_sString.Right(p_sString.GetLength()-(p_sString.FindRev('/')+1));
		return(p_sString);
	endproc;

	proc string DoubleCutString(string p_sString)
		p_sString=p_sString.Left(p_sString.FindRev('.'));
		return(p_sString);
	endproc;

	export proc bool AddRecent(string p_sString)
		m_pxFileOpenRecent^.SetDisabled(false);
		if(p_sString.Right(4)==".ula")then
			var int idx;
			var bool bAdd;
			if(m_iCurRecentDB<m_iMaxRecentDB)then
				bAdd=true;
				for(idx=0)cond(idx<m_iMaxRecentDB)iter(idx++)do
					if(m_asRecent[idx]==p_sString)then
						bAdd=false;
					endif;
				endfor;
				if(bAdd)then
					m_iCurRecentDB++;
					AddDButton(m_iCurRecentDB,p_sString);
				endif;
			endif;
			for(idx=0)cond(idx<m_iMaxRecentDB)iter(idx++)do
				if(m_asRecent[idx]==p_sString)then
					if(idx==0)then
						return(true);
					else
						m_asRecent.DeleteEntry(idx);
						m_asRecent.AddEntry("");
					endif;
				endif;
			endfor;
			for(idx=m_iCurRecentDB-1)cond(idx>0)iter(idx--)do
				m_asRecent[idx]=m_asRecent[idx-1];
			endfor;
			m_asRecent[0]=p_sString;
			SaveRecent();
			UpdateRecentDropButton();
			m_pxActualLevel^.SetName(DoubleCutString(CutString(m_asRecent[0])));
			return(true);
		endif;
		return false;
	endproc;

	proc bool UpdateRecentDropButton()
		if(m_iCurRecentDB>0)then
			m_pxFORecent0^.SetText("1. "+CutString(m_asRecent[0]));
		endif;
		if(m_iCurRecentDB>1)then
			m_pxFORecent1^.SetText("2. "+CutString(m_asRecent[1]));
		endif;
		if(m_iCurRecentDB>2)then
			m_pxFORecent2^.SetText("3. "+CutString(m_asRecent[2]));
		endif;
		if(m_iCurRecentDB>3)then
			m_pxFORecent3^.SetText("4. "+CutString(m_asRecent[3]));
		endif;
		return(true);
	endproc;

	export proc void LoadFile(string p_sFile)
		if(!Filesystem.FileExists(p_sFile))then
			KLog.LogWarn("Manni","File '"+p_sFile+"' not found!");
			CMessageBox.MsgBox("Error:","Level could not be loaded.");
			return();
		else
			CLevelEditorInst.SetLoadWindow("Loading Map");
			CLevelEditorInst.SetLoadWindowLoadLevel();
			m_sLoadFileString=p_sFile;
			m_sCurrentLoadingLevel=p_sFile;
			OnClearData();
			CEvt_LoadLevel.Send(p_sFile);
			m_pxActualLevel^.SetFilePath(p_sFile);
			CMainController.Get().DisableDropButtons();
			AddRecent(p_sFile);
		endif;
	endproc;

	proc bool OnRecent0()
		if((m_asRecent[0]!="-1")&&(m_asRecent[0]!=""))then
			LoadFile(m_asRecent[0]);
		else
			CMessageBox.MsgBox(CLocalizer.Get().Translate("_EnhancedMenu_Warning"), CLocalizer.Get().Translate("_EnhancedMenu_NoMap"));
		endif;
		return(true);
	endproc;

	proc bool OnRecent1()
		if((m_asRecent[1]!="-1")&&(m_asRecent[1]!=""))then
			LoadFile(m_asRecent[1]);
		else
			CMessageBox.MsgBox(CLocalizer.Get().Translate("_EnhancedMenu_Warning"), CLocalizer.Get().Translate("_EnhancedMenu_NoMap"));
		endif;
		return(true);
	endproc;

	proc bool OnRecent2()
		if((m_asRecent[2]!="-1")&&(m_asRecent[2]!=""))then
			LoadFile(m_asRecent[2]);
		else
			CMessageBox.MsgBox(CLocalizer.Get().Translate("_EnhancedMenu_Warning"), CLocalizer.Get().Translate("_EnhancedMenu_NoMap"));
		endif;
		return(true);
	endproc;

	proc bool OnRecent3()
		if((m_asRecent[3]!="-1")&&(m_asRecent[3]!=""))then
			LoadFile(m_asRecent[3]);
		else
			CMessageBox.MsgBox(CLocalizer.Get().Translate("_EnhancedMenu_Warning"), CLocalizer.Get().Translate("_EnhancedMenu_NoMap"));
		endif;
		return(true);
	endproc;

	proc bool IncCamSpeed();
		var ^CGameCameraModule pxMod=CMultiCameraController.Get().GetGameCameraModule();
		pxMod^.m_fMouseSpeedScale+=0.5f;
		pxMod^.m_fMouseSpeedScale=Math.Clamp(pxMod^.m_fMouseSpeedScale,0.5f,10.0f);
		pxMod^.m_fKeySpeedScale+=0.5f;
		pxMod^.m_fKeySpeedScale=Math.Clamp(pxMod^.m_fKeySpeedScale,0.5f,10.0f);
		//REMOVE CMainController.Get().m_xCameraCtrl.m_fSpeedScale+=0.5f;
		//REMOVE CMainController.Get().m_xCameraCtrl.m_fSpeedScale=Math.Clamp(CMainController.Get().m_xCameraCtrl.m_fSpeedScale,0.5f,10.0f);
		return(true);
	endproc;

	proc bool DecCamSpeed();
		var ^CGameCameraModule pxMod=CMultiCameraController.Get().GetGameCameraModule();
		pxMod^.m_fMouseSpeedScale-=0.5f;
		pxMod^.m_fMouseSpeedScale=Math.Clamp(pxMod^.m_fMouseSpeedScale,0.5f,10.0f);
		pxMod^.m_fKeySpeedScale-=0.5f;
		pxMod^.m_fKeySpeedScale=Math.Clamp(pxMod^.m_fKeySpeedScale,0.5f,10.0f);
		//REMOVE CMainController.Get().m_xCameraCtrl.m_fSpeedScale-=0.5f;
		//REMOVE CMainController.Get().m_xCameraCtrl.m_fSpeedScale=Math.Clamp(CMainController.Get().m_xCameraCtrl.m_fSpeedScale,0.5f,10.0f);
		return(true);
	endproc;

	proc bool ChangeVis();
		SetVisible(!GetVisible());
		return(true);
	endproc;

	proc bool OnSwitchGrid()
		KLog.LogSpam("AnTr","OnSwitchGrid()");
		GetPreferences()^.GetGraphicPreferences()^.SwitchGrid();
		return(true);
	endproc;
	
	proc bool OnQuickCopy();
		m_pxObjInsert^.QuickCopy();
		return(true);
	endproc;

	proc bool OnSnapSelectionToGround()
		var ^CObjSelection pxSel=^(CClientWrap.GetSelection());
		if (pxSel==null) then return(true); endif;

		var int i,iC=pxSel^.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CObj pxO = pxSel^[i].GetObj();
			if (pxO==null) then continue; endif;
			
			var vec3 vObjPos = pxO^.GetPos();
			var real fSeaLevel = CClientWrap.GetScapeMgr().GetSeaLevel();
			var real fScapeLevel = CClientWrap.GetScapeMgr().GetHeight(vObjPos.GetX(),vObjPos.GetY());
			if (fScapeLevel<fSeaLevel && pxO^.CanSwim()) then
				vObjPos.SetZ(fSeaLevel);
			else
				vObjPos.SetZ(fScapeLevel);
			endif;
			pxO^.SetPos(vObjPos);
		endfor;
		pxSel^.UpdatePos();
		return(true);
	endproc;

	proc bool SwitchServerProfiler()
		CEvt_GenericEvent.Send("SwitchServerProfiler");
		return(true);
	endproc;

	proc bool SwitchProfiler()
		if(m_bProfiler)then
			Profiler.Stop();
			Profiler.ExportCSV("profiled_editor.csv");
			m_bProfiler = false;
		else
			Profiler.Start();
			m_bProfiler = true;
		endif;
		return(true);
	endproc;

	proc bool OnSwitchLight();
		//m_pxViewScapeOptions^.SwitchLight();
		return(true);
	endproc;

	proc bool OnSwitchPassability()
		GetPreferences()^.GetGraphicPreferences()^.OnChangePassability();
		return(true);
	endproc;

	proc bool OnSwitchNonPassability()
		GetPreferences()^.GetGraphicPreferences()^.OnChangeNonPassability();
		return(true);
	endproc;

	proc bool OnSwitchUnderWaterFog()
		GetPreferences()^.GetGraphicPreferences()^.SwitchUnderWaterFog();
		return(true);
	endproc;

	proc bool OnSwitchObjectNames()
		GetPreferences()^.GetGraphicPreferences()^.SwitchObjectNames();
		return(true);
	endproc;

	proc bool OnSwitchRenderForest()
		GetPreferences()^.GetGraphicPreferences()^.SwitchRenderForest();
		return(true);
	endproc;
	
	proc bool OnSwitchRenderAllObjects()
		KLog.LogSpam("AnTr","OnSwitchRenderAllObjects()");
		GetPreferences()^.GetGraphicPreferences()^.SwitchRenderAllObjects();
		return(true);
	endproc;

	proc bool OnSwitchWallMap()
		GetPreferences()^.GetGraphicPreferences()^.SwitchWallmap();
		return(true);
	endproc;

	proc bool OnSwitchWater();
		GetPreferences()^.GetGraphicPreferences()^.SwitchWater();
		return(true);
	endproc;

	proc bool OnActivateTerrainLevel();
		CMainController.Get().ActivateTerrainLevel();
		m_pxViewScapeEdit^.PushButton(1);
		CIconBar.Get().PushButton(1);
		m_pxViewScapeEdit^.PushMaterialButton(-1);
		CIconBar.Get().DisableEditButtons(true);
		m_pxDesktop^.SetCursor(2);
		return(true);
	endproc;

	proc bool OnActivateTerrainBlur();
		m_pxViewScapeEdit^.PushMaterialButton(-1);
		CIconBar.Get().DisableEditButtons(true);
		CMainController.Get().ActivateTerrainBlur();
		m_pxViewScapeEdit^.PushButton(2);
		CIconBar.Get().PushButton(2);
		m_pxDesktop^.SetCursor(2);
		return(true);
	endproc;

	proc bool OnActivateTerrainNoise();
		m_pxViewScapeEdit^.PushMaterialButton(-1);
		CIconBar.Get().DisableEditButtons(true);
		CMainController.Get().ActivateTerrainNoise();
		m_pxViewScapeEdit^.PushButton(3);
		CIconBar.Get().PushButton(3);
		m_pxDesktop^.SetCursor(2);
		return(true);
	endproc;

	proc bool OnActivateTerrainDetail();
		m_pxViewScapeEdit^.PushMaterialButton(-1);
		CIconBar.Get().DisableEditButtons(true);
		CMainController.Get().ActivateTerrainDetail();
		m_pxViewScapeEdit^.PushButton(4);
		CIconBar.Get().PushButton(4);
		m_pxDesktop^.SetCursor(2);
		return(true);
	endproc;

	proc bool OnActivateTerrainForest();
		m_pxViewScapeEdit^.PushMaterialButton(-1);
		CIconBar.Get().DisableEditButtons(true);
		CMainController.Get().ActivateTerrainForest();
		m_pxViewScapeEdit^.PushButton(6);
		CIconBar.Get().PushButton(6);
		m_pxDesktop^.SetCursor(2);
		return(true);
	endproc;

	proc bool OnActivateTerrainPlateau();
		m_pxViewScapeEdit^.PushMaterialButton(-1);
		CIconBar.Get().DisableEditButtons(true);
		CMainController.Get().ActivateTerrainPlateau();
		m_pxViewScapeEdit^.PushButton(5);
		CIconBar.Get().PushButton(5);
		m_pxDesktop^.SetCursor(2);
		return(true);
	endproc;

	proc bool OnActivateMaterial1();
		CMainController.Get().ActivateMatPaint(0);
		m_pxViewScapeEdit^.PushMaterialButton(0);
		GetScapeEdit()^.OnMaterial1();
		return(true);
	endproc;

	proc bool OnActivateMaterial2();
		CMainController.Get().ActivateMatPaint(1);
		m_pxViewScapeEdit^.PushMaterialButton(1);
		GetScapeEdit()^.OnMaterial2();
		return(true);
	endproc;

	proc bool OnActivateMaterial3();
		CMainController.Get().ActivateMatPaint(2);
		m_pxViewScapeEdit^.PushMaterialButton(2);
		GetScapeEdit()^.OnMaterial3();
		return(true);
	endproc;

	proc bool OnActivateMaterial4();
		CMainController.Get().ActivateMatPaint(3);
		m_pxViewScapeEdit^.PushMaterialButton(3);
		GetScapeEdit()^.OnMaterial4();
		return(true);
	endproc;

	proc bool OnActivateMaterial5();
		CMainController.Get().ActivateMatPaint(4);
		m_pxViewScapeEdit^.PushMaterialButton(4);
		GetScapeEdit()^.OnMaterial5();
		return(true);
	endproc;

	proc bool OnActivateMaterial6();
		CMainController.Get().ActivateMatPaint(5);
		m_pxViewScapeEdit^.PushMaterialButton(5);
		GetScapeEdit()^.OnMaterial6();
		return(true);
	endproc;

	proc bool OnActivateMaterial7();
		CMainController.Get().ActivateMatPaint(6);
		m_pxViewScapeEdit^.PushMaterialButton(6);
		GetScapeEdit()^.OnMaterial7();
		return(true);
	endproc;

	proc bool OnActivateMaterial8();
		CMainController.Get().ActivateMatPaint(7);
		m_pxViewScapeEdit^.PushMaterialButton(7);
		GetScapeEdit()^.OnMaterial8();
		return(true);
	endproc;

	proc bool ActivateBeautyCtrl();
		CLevelEditorWrap.LogInfo("UI.EnchancedMenu","BeautyCtrl active");
		CMainController.Get().ActivateBeauty();
		return(true);
	endproc;

	proc bool OnActivateTerrainAltitude();
		m_pxViewScapeEdit^.PushMaterialButton(-1);
		CIconBar.Get().DisableEditButtons(true);
		CMainController.Get().ActivateTerrainAltitude();
		m_pxViewScapeEdit^.PushButton(0);
		CIconBar.Get().PushButton(0);
		m_pxDesktop^.SetCursor(2);
		return(true);
	endproc;

	proc bool IncreaseBrush();
		CMainController.Get().GetTerrainCtrl().ChangeBrushSize(1);
		CMainController.Get().GetBeautyCtrl().ChangeBrushSize(1);
		return(true);
	endproc;

	proc bool DecreaseBrush();
		CMainController.Get().GetTerrainCtrl().ChangeBrushSize(-1);
		CMainController.Get().GetBeautyCtrl().ChangeBrushSize(-1);
		return(true);
	endproc;

	proc bool IncreaseBrushIntensity();
		CIconBar.Get().SetIntensity(1);
		return(true);
	endproc;

	proc bool DecreaseBrushIntensity();
		CIconBar.Get().SetIntensity(-1);
		return(true);
	endproc;

	proc bool IncreaseDayTime()
		GetPreferences()^.GetGraphicPreferences()^.IncreaseDayTime();
		return(true);
	endproc;

	proc bool DecreaseDayTime()
		GetPreferences()^.GetGraphicPreferences()^.DecreaseDayTime();
		return(true);
	endproc;

	export proc bool SetLevel( ^CLevel p_pxActualLevel);
		m_pxActualLevel = p_pxActualLevel;
		return(true);
	endproc;

	export proc CLevel GetLevel()
		return(m_pxActualLevel^);
	endproc;

	export proc bool OnFileNew()
		m_pxFileNew^.SetVisible(true);
		m_pxFileNew^.m_xOnDone=OnNewLevel;
		m_pxFileNew^.m_xOnClear=OnClearData;
		CWindowMgr.Get().BringWindowToTop(m_pxFileNew,true);
		m_pxFileNew^.SetModal();
		return(true);
	endproc;

	proc bool OnClearData()
		m_pxObjProperties^.Clear();
		m_pxObjFinder^.Clear();
		m_pxViewZoneCreate^.Clear();
		return(true);
	endproc;

	proc bool OnNewLevel(CLevel p_xLevel,string p_sName)
		m_pxActualLevel^	=	p_xLevel;
		m_sLevelName=p_sName;
		m_pxActualLevel^.SetName(p_sName);
		//m_pxObjInsert^.SetSetting(p_xLevel.GetSetting());
		m_pxViewScapeEdit^.SetSetting(p_xLevel.GetSetting());
		CLevelEditorWrap.GetForestMgr().LoadForestConfig(CLevelEditorWrap.GetUrsRelPath()+"/Data/Base/Scripts/Server/Classes/Vegetation/Forest_"+p_xLevel.GetSetting()+".txt");
		return(true);
	endproc;

	export proc string GetLevelName()
		GetLevel();
		if(m_pxActualLevel^.GetName()!="")then
			return(DoubleCutString(CutString(m_pxActualLevel^.GetName())));
		else
			return(m_sLevelName);
		endif;
	endproc;

	proc bool ViewLevelInfo()
		if(m_pxViewLevelInfo^.GetVisible()==true)then
			m_pxViewLevelInfo^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxViewLevelInfo,false);
		else
			m_pxViewLevelInfo^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxViewLevelInfo,true);
		endif;
		return(true);
	endproc;

	proc bool ViewQuestEditor()
		if(m_pxViewQuestEditor^.GetVisible()==true)then
			m_pxViewQuestEditor^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxViewQuestEditor,false);
		else
			m_pxViewQuestEditor^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxViewQuestEditor,true);
		endif;
		return(true);
	endproc;

	proc bool ViewPlayerInfo()
		if(m_pxViewPlayerInfo^.GetVisible()==true)then
			m_pxViewPlayerInfo^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxViewPlayerInfo,false);
		else
			m_pxViewPlayerInfo^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxViewPlayerInfo,true);
		endif;
		return(true);
	endproc;


	proc bool EditScape()
		if(m_pxViewScapeEdit^.GetVisible()==true)then
			m_pxViewScapeEdit^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxViewScapeEdit,false);
		else
			m_pxViewScapeEdit^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxViewScapeEdit,true);
		endif;
		return(true);
	endproc;

	proc bool MiniMap()
		if(m_pxMiniMap^.GetVisible()==true)then
			m_pxMiniMap^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxMiniMap,false);
		else
			m_pxMiniMap^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxMiniMap,true);
		endif;
		return(true);
	endproc;

	proc bool ScapeTemplates()
		if(m_pxViewScapeTemplates^.GetVisible()==true)then
			m_pxViewScapeTemplates^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxViewScapeTemplates,false);
		else
			m_pxViewScapeTemplates^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxViewScapeTemplates,true);
		endif;
		return(true);
	endproc;

	proc bool OnObjFind()
		if(m_pxObjFinder^.GetVisible()==true)then
			m_pxObjFinder^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxObjFinder,false);
		else
			m_pxObjFinder^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxObjFinder,true);
		endif;
		return(true);
	endproc;

	proc bool OnShowInvisible()
		CIconBar.Get().SwitchShowInvisibleObjects();
		return(true);
	endproc;

	export proc bool OnSequenceEditor()
		if(m_pxSequenceEditor^.GetVisible()==true)then
			m_pxSequenceEditor^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxSequenceEditor,false);
		else
			m_pxSequenceEditor^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxSequenceEditor,true);
		endif;
		return true;
	endproc;

	proc bool OnObjTransform()
		if(m_pxObjTransform^.GetVisible()==true)then
			m_pxObjTransform^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxObjTransform,false);
		else
			m_pxObjTransform^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxObjTransform,true);
		endif;
		return(true);
	endproc;

	proc bool OnObjProps()
		if(m_pxObjProperties^.GetVisible()==true)then
			m_pxObjProperties^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxObjProperties,false);
		else
			m_pxObjProperties^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxObjProperties,true);
		endif;
		return(true);
	endproc;

    proc bool OnObjectGoat()
	    if(m_pxObjGoat^.GetVisible()==true)then
	    	m_pxObjGoat^.SetVisible(false);
	    	CWindowMgr.Get().BringWindowToTop(m_pxObjGoat,false);
	    else
		    m_pxObjGoat^.SetVisible(true);
		    CWindowMgr.Get().BringWindowToTop(m_pxObjGoat,true);
	    endif;
	    return(true);
    endproc;

	proc bool OnBrush()
		if(m_pxViewBrush^.GetVisible()==true)then
			m_pxViewBrush^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxViewBrush,false);
		else
			m_pxViewBrush^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxViewBrush,true);
		endif;
		return(true);
	endproc;

	proc bool OnScapeResize()
		if(m_pxViewResize^.GetVisible()==true)then
			m_pxViewResize^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxViewResize,false);
		else
			m_pxViewResize^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxViewResize,true);
		endif;
		return(true);
	endproc;

	proc bool OnObjFinder()
		if(m_pxObjFinder^.GetVisible()==true)then
			m_pxObjFinder^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxObjFinder,false);
		else
			m_pxObjFinder^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxObjFinder,true);
		endif;
		return(true);
	endproc;

	proc bool OnObjProperties()
		if(m_pxObjProperties^.GetVisible()==true)then
			m_pxObjProperties^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxObjProperties,false);
		else
			m_pxObjProperties^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxObjProperties,true);
		endif;
		return(true);
	endproc;

	proc bool ViewLevelProp()
		if(m_pxViewLevelProp^.GetVisible()==true)then
			m_pxViewLevelProp^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxViewLevelProp,false);
		else
			m_pxViewLevelProp^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxViewLevelProp,true);
		endif;
		return(true);
	endproc;

	proc bool OnObjInsert()
		if(m_pxObjInsert^.GetVisible()==true)then
			m_pxObjInsert^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxObjInsert,false);
		else
			m_pxObjInsert^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxObjInsert,true);
		endif;
		return(true);
	endproc;

	export proc bool OnLoad()
		var ^CEnhancedLoadSaveDialog pxTmp = new CEnhancedLoadSaveDialog(0,"");
		pxTmp^.SetUniqueSettingName("LevelLoadSaveDlg");
		pxTmp^.ClearFilters();
		pxTmp^.AddFilter("ULA Files","*.ula");
		pxTmp^.AddFilter("LUS Files","*.lus");
		m_pxDesktop^.AddChild(pxTmp);
		pxTmp^.m_xReturnFileString=OnReturnLoadString;
		CWindowMgr.Get().BringWindowToTop(pxTmp,true);
		CWindowMgr.Get().SetModal(pxTmp);
		return(true);
	endproc;

	export proc bool OnSave()

		if(m_pxActualLevel==null)then
			return(false);
		endif;
		if(m_pxActualLevel^.GetFilePath()=="") then
			if(m_pxViewTriggerCreate!=null) then
				m_pxViewTriggerCreate^.OnSave();
			endif;
			var ^CEnhancedLoadSaveDialog pxTmp = new CEnhancedLoadSaveDialog(1,GetLevelName());
			pxTmp^.SetUniqueSettingName("LevelLoadSaveDlg");
			pxTmp^.ClearFilters();
			pxTmp^.AddFilter("ULA Files","*.ula");
			pxTmp^.AddFilter("LUS Files","*.lus");
			pxTmp^.m_xReturnFileString=OnReturnSaveString;
			m_pxDesktop^.AddChild(pxTmp);
			CWindowMgr.Get().BringWindowToTop(pxTmp, true);
			CWindowMgr.Get().SetModal(pxTmp);
		else
			OnReturnSaveString(m_pxActualLevel^.GetFilePath());
		endif;
		return(true);
	endproc;

	export proc bool OnSaveAsLevel()
		if(m_pxViewTriggerCreate!=null) then
			m_pxViewTriggerCreate^.OnSave();
		endif;
		var ^CEnhancedLoadSaveDialog pxTmp = new CEnhancedLoadSaveDialog(1,GetLevelName());
		pxTmp^.SetUniqueSettingName("LevelLoadSaveDlg");
		pxTmp^.ClearFilters();
		pxTmp^.AddFilter("ULA Files","*.ula");
		pxTmp^.AddFilter("LUS Files","*.lus");
		pxTmp^.m_xReturnFileString=OnReturnSaveString;
		m_pxDesktop^.AddChild(pxTmp);
		CWindowMgr.Get().BringWindowToTop(pxTmp, true);
		CWindowMgr.Get().SetModal(pxTmp);
		return(true);
	endproc;

	proc bool OnReturnLoadString(string p_sFileString);
		LoadFile(p_sFileString);
		return(true);
	endproc;

	export proc string GetCurrentLoadingLevel();
		return(m_sCurrentLoadingLevel);
	endproc;

	export proc void SetShowWarnings(bool p_bParam);
		m_bShowWarnings=p_bParam;
	endproc;

	export proc bool GetShowWarnings();
		return(m_bShowWarnings);
	endproc;

	proc bool OnReturnSaveString(string p_sFileString);
		if(CEnhancedMenu.Get().GetShowWarnings())then
			var Filesystem.CFileAttributes xFileAttributes;
			if(xFileAttributes.GetFromFile(p_sFileString))then
				if(xFileAttributes.m_bReadOnly==true)then
					CMessageBox.MsgBox("Error","File is write protected, and can not be saved!");
					return(false);
				endif;
			else
				KLog.LogInfo("Editor","File not found!");
			endif;
		endif;
		m_sSaveFileString=p_sFileString;
		GetViewLevelInfo()^.SaveLevelInfo();
		//GetViewQuestEditor()^.SaveLevelInfo();
		GetViewPlayerInfo()^.SaveLevelInfo();
		CEvt_SendTriggerDescMgr.Send();
		CEvt_SaveLevel.Send(p_sFileString);
		m_pxActualLevel^.SetFilePath(p_sFileString);
		CLevelEditorInst.ms_bMsgBoxOnSaveEnd=true;		
		return(true);
	endproc;

	proc bool OnCreateTrigger()
		if(m_pxViewTriggerCreate^.GetVisible()==true)then
			m_pxViewTriggerCreate^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxViewTriggerCreate,false);
		else
			m_pxViewTriggerCreate^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxViewTriggerCreate,true);
		endif;
		return(true);
	endproc;

	proc bool OnZoneTrigger()
		if(m_pxViewZoneCreate^.GetVisible()==true)then
			m_pxViewZoneCreate^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxViewZoneCreate,false);
		else
			m_pxViewZoneCreate^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxViewZoneCreate,true);
		endif;
		return(true);
	endproc;

	proc bool OnPreferences()
		if(m_pxViewPreferences^.GetVisible()==true)then
			m_pxViewPreferences^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxViewPreferences,false);
		else
			m_pxViewPreferences^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxViewPreferences,true);
		endif;
		return(true);
	endproc;


	proc bool OnOpenHelp()
		if(m_pxViewHelp^.GetVisible()==true)then
			m_pxViewHelp^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxViewHelp,false);
		else
			m_pxViewHelp^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxViewHelp,true);
		endif;
		return(true);
	endproc;

	proc bool OnTipOfTheDay()
		if(m_pxViewTipOfTheDay^.GetVisible()==true)then
			m_pxViewTipOfTheDay^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxViewTipOfTheDay,false);
		else
			m_pxViewTipOfTheDay^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxViewTipOfTheDay,true);
		endif;
		return(true);
	endproc;

	proc bool OnSequenceControlPanel()
		if(m_pxSequenceControlPanel^.GetVisible()==true)then
			m_pxSequenceControlPanel^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxSequenceControlPanel,false);
		else
			m_pxSequenceControlPanel^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxSequenceControlPanel,true);
		endif;
		return(true);
	endproc;

	proc bool OnDialogSceneEditor()
		if(m_pxDialogSceneEditor^.GetVisible()==true)then
			m_pxDialogSceneEditor^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxDialogSceneEditor,false);
		else
			m_pxDialogSceneEditor^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxDialogSceneEditor,true);
		endif;
		return(true);
	endproc;

	proc bool OnLevelCheck()
		if(m_pxLevelCheck^.GetVisible()==true)then
			m_pxLevelCheck^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxLevelCheck,false);
		else
			m_pxLevelCheck^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxLevelCheck,true);
		endif;
		return(true);
	endproc;

	proc bool OnLevelPic()
		if(m_sSaveFileString.GetLength()>0)then
			CLevelEditorWrap.GenerateLevelPic(1024,m_sSaveFileString+".tga");
		elseif(m_sLoadFileString.GetLength()>0)then
			CLevelEditorWrap.GenerateLevelPic(1024,m_sLoadFileString+".tga");
		else
			CLevelEditorWrap.GenerateLevelPic(1024,"levelpic.tga");
		endif;
		return(true);
	endproc;

	proc bool OnDumpTriggerInfo()
		if(m_pxDumpTriggerInfo^.GetVisible()==true)then
			m_pxDumpTriggerInfo^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxDumpTriggerInfo,false);
		else
			m_pxDumpTriggerInfo^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxDumpTriggerInfo,true);
		endif;
		return(true);
	endproc;

	proc bool OnDumpLevelInfo()
		CMessageBox.MsgBox("Dump Level Info", "Levelinfo dumped to C:/LevelInfoDump.txt");
		var ^CLevelInfo pxLevelInfo=^(CLevelEditorWrap.GetClient().GetLevelInfo());
		var ^CPropDB pxGenericDB=^(pxLevelInfo^.GetGenericData());
		pxGenericDB^.Save("C:/LevelInfoDump.txt");
		return(true);
	endproc;

	proc bool OnAbout()
		if(m_pxViewAbout^.GetVisible()==true)then
			m_pxViewAbout^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxViewAbout,false);
		else
			m_pxViewAbout^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxViewAbout,true);
		endif;
		return(true);
	endproc;

	proc void OnQuickStart_SaveCallBack(int p_iResult)
		var bitset dwResult = Math.IntToBitset(p_iResult);
		if(dwResult==CMessageBox.SID_YES)then
			OnSave();
			//DoQuickStart(true);
		endif;
	endproc;

	proc bool OnQuickStart()
		return DoQuickStart(false);
	endproc;

	proc bool DoQuickStart(bool p_bForce)
		var string sLevelPath = m_pxActualLevel^.GetFilePath();
		if(sLevelPath=="")then
			// level has never been saved!
			if(p_bForce==true)then
				CMessageBox.MsgBox(CLocalizer.Get().Translate("_LevelEditor_Error"),CLocalizer.Get().Translate("_LevelEditor_NotSaved"));
			else
				CMessageBox.MsgBox_YESNO(CLocalizer.Get().Translate("_LevelEditor_Error"),CLocalizer.Get().Translate("_LevelEditor_NotSaved_Question"),CMessageBox.SMB_ICONQUESTION,OnQuickStart_SaveCallBack);
				return(true);
			endif;
		else
			// store current level file name and client to be started in global attribs so that the main menu can do something cool
			CClientWrap.GetGlobalAttribs().SetValue("autostart_level",sLevelPath);
			CClientWrap.GetGlobalAttribs().SetValue("autostart_client","Game");
			m_bQuickStarting=true;
			// quit level editor and return to main menu
			return(OnClose());
		endif;
		return(true);
	endproc;

	proc bool OnFXSettings()
		if(m_pxFXSettings^.GetVisible()==true)then
			m_pxFXSettings^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxFXSettings,false);
		else
			m_pxFXSettings^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxFXSettings,true);
		endif;
		return(true);
	endproc;

	proc bool OnTTEditor()
		CTTEditor2.Show(false);
		return true;
	endproc;

	proc bool ViewAtmoMarkers()
		if(m_pxViewAtmoMarkers^.GetVisible()==true)then
			m_pxViewAtmoMarkers^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxViewAtmoMarkers,false);
		else
			m_pxViewAtmoMarkers^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxViewAtmoMarkers,true);
		endif;
		return(true);
	endproc;

	proc bool AtmoMarkerTemplates()
		if(m_pxAtmoMarkerTemplates^.GetVisible()==true)then
			m_pxAtmoMarkerTemplates^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxAtmoMarkerTemplates,false);
		else
			m_pxAtmoMarkerTemplates^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxAtmoMarkerTemplates,true);
		endif;
		return(true);
	endproc;

	proc bool MaterialAtmos()
		if(m_pxMaterialAtmos^.GetVisible()==true)then
			m_pxMaterialAtmos^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxMaterialAtmos,false);
		else
			m_pxMaterialAtmos^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxMaterialAtmos,true);
		endif;
		return(true);
	endproc;

	proc bool ShowAudioListener()
		CIconBar.Get().OnSwitchAudioListener();
		return(true);
	endproc;

	proc bool EAXEnvironments()
		if(m_pxEAXEnvironments^.GetVisible()==true)then
			m_pxEAXEnvironments^.SetVisible(false);
			CWindowMgr.Get().BringWindowToTop(m_pxEAXEnvironments,false);
		else
			m_pxEAXEnvironments^.SetVisible(true);
			CWindowMgr.Get().BringWindowToTop(m_pxEAXEnvironments,true);
		endif;
		return(true);
	endproc;

	proc bool SetShutDownTimer()
		CLevelEditorInst.SetLoadWindow("Shutting Down");
		m_iShutDownTimer=SetTimer(100,false);
		return(true);
	endproc;

	proc bool OnClose()
		m_pxViewPreferences^.DisableAutosaveTimer();
		CEvt_ClientDisconnect.Send();

		if(!m_bQuickStarting)then
			CClientWrap.GetGlobalAttribs().RemoveValue("autostart_client");
			CClientWrap.GetGlobalAttribs().RemoveValue("autostart_level");
		endif;

		return true;
	endproc;

	proc bool OnObjMove()
		CMainController.Get().SetState(1);
		CMainController.Get().GetTransformCtrl().SetTransformState(0);
		return true;
	endproc;

	proc bool OnObjRot()
		CMainController.Get().SetState(1);
		CMainController.Get().GetTransformCtrl().SetTransformState(1);
		return true;
	endproc;

	export proc ^CViewObjFinder GetObjFinder()
		return m_pxObjFinder;
	endproc;

	export proc ^CSequenceEditor GetSequenceEditor()
		return m_pxSequenceEditor;
	endproc;

	export proc ^CViewPreferences GetPreferences()
		return m_pxViewPreferences;
	endproc;

	export proc ^CViewObjInsert GetObjInsert()
		return m_pxObjInsert;
	endproc;

	export proc ^CViewMiniMap GetMiniMap()
		return m_pxMiniMap;
	endproc;

	export proc ^CViewAtmoMarkers GetViewAtmoMarkers()
		return m_pxViewAtmoMarkers;
	endproc;


	export proc ^CViewBrush GetViewBrushes()
		return(m_pxViewBrush);
	endproc;


	export proc ^CViewRegionCreate GetViewZoneCreate()
		return m_pxViewZoneCreate;
	endproc;

	export proc ^CViewTriggerCreate GetViewTriggerCreate()
		return m_pxViewTriggerCreate;
	endproc;

	export proc ^CViewColorPicker GetViewColorPicker()
		return m_pxColorPicker;
	endproc;

	export proc ^CViewObjProperties GetObjProperties()
		return m_pxObjProperties;
	endproc;

	//sets the default positions for windows
	export proc bool SetDefaultPositions()
		if(CSettings.NumSubs("Editor/Windows")==0)then
			CSettings.Set("Editor/Windows/ScapeEdit/Pos_X",0);
			CSettings.Set("Editor/Windows/ScapeEdit/Pos_Y",422);
			CSettings.Set("Editor/Windows/Material/Pos_X",601);
			CSettings.Set("Editor/Windows/Material/Pos_Y",116);
			CSettings.Set("Editor/Windows/Brushes/Pos_X",601);
			CSettings.Set("Editor/Windows/Brushes/Pos_Y",46);
			CSettings.Set("Editor/Windows/Time_Light/Pos_X",601);
			CSettings.Set("Editor/Windows/Time_Light/Pos_Y",167);
			CSettings.Set("Editor/Windows/ObjInsert/Pos_X",601);
			CSettings.Set("Editor/Windows/ObjInsert/Pos_Y",247);
			CSettings.Set("Editor/Windows/ObjFinder/Pos_X",401);
			CSettings.Set("Editor/Windows/ObjFinder/Pos_Y",247);
			CSettings.Set("Editor/Windows/MiniMap/Pos_X",120);
			CSettings.Set("Editor/Windows/MiniMap/Pos_Y",434);
			CSettings.Set("Editor/Windows/Info/Pos_X",401);
			CSettings.Set("Editor/Windows/Info/Pos_Y",147);

		endif;
		return(true);
	endproc;

	proc bool OnHelp()
		var ^CWindow pxAct = CWindowMgr.Get().GetHoveredWindow();
		if(pxAct!=null)then
			if(pxAct^.GetIsTopLevelWindow())then
				pxAct^.SetToolTipText("");
			endif;
		endif;
		return true;
	endproc;

	proc bool OnCHP()
		CLevelEditorWrap.LogInfo("UI.EnchancedMenu","Dbg/ChPe");
		m_pxDbgChPe^.SetVisible(true);
		CWindowMgr.Get().BringWindowToTop(m_pxDbgChPe,true);
		return true;
	endproc;

	proc bool ToggleCaptureVideo()
		m_bCapture=CapVid(m_bCapture);
		return(true);
	endproc;

	proc bool CapVid(bool p_bCapture)
		if(p_bCapture)then
			m_pxDesktop^.CaptureStart("LevelEdCapture.raw");
		else
			m_pxDesktop^.CaptureStop();
		endif;
		return(!p_bCapture);
	endproc;

	proc bool OnCopyObjects()
		var ^CObjSelection pxSel=^(CClientWrap.GetSelection());
		var int i,iC=pxSel^.NumEntries();
		for(i=0)cond(i<iC)iter(i++)do
			var ^CObj pxObj=pxSel^[i].GetObj();
			if(pxObj!=null)then
				CLevelEditorWrap.LogInfo("UI.EnchancedMenu","Copy Objects  --> "+pxObj^.GetPos().ToString());
				CLevelEditorWrap.LogInfo("UI.EnchancedMenu","Copy Objects  --> "+pxObj^.GetRotation().ToString());
				CLevelEditorWrap.LogInfo("UI.EnchancedMenu","Copy Objects  --> "+pxObj^.GetClassName());
			endif;
		endfor;
		return(true);
	endproc;

	proc bool OnCutObjects()
		CLevelEditorWrap.LogInfo("UI.EnchancedMenu","Cut Objects");
		return(true);
	endproc;

	proc bool OnPasteObjects()
		CLevelEditorWrap.LogInfo("UI.EnchancedMenu","Paste Objects");
		return(true);
	endproc;

	export proc bool ReloadWindowPositions()
		var int i;
		for(i=0)cond(i<m_apxWindows.NumEntries())iter(i++)do
			m_apxWindows[i]^.LoadPosition(m_apxWindows[i]^.GetName());
		endfor;
		return(true);
	endproc;

	export proc bool SaveWindowPositions()
		var int i;
		for(i=0)cond(i<m_apxWindows.NumEntries())iter(i++)do
			m_apxWindows[i]^.SaveOnDestruct();
		endfor;
		return(true);
	endproc;

endclass;

